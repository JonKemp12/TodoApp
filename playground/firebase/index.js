import firebase from 'firebase';


// Initialize Firebase
var config = {
  apiKey: "AIzaSyBgrzRv-iF9B2J74oH5EyhJ77VMTrIekFY",
  authDomain: "jons-todo-app.firebaseapp.com",
  databaseURL: "https://jons-todo-app.firebaseio.com",
  projectId: "jons-todo-app",
  storageBucket: "jons-todo-app.appspot.com",
  messagingSenderId: "697045583773"
};
firebase.initializeApp(config);

var firebaseRef = firebase.database().ref();

// Set some data into the database:
// NOTE: this resets ALL the set data at this reference!
// It returns a promise so can use then for success & failure handling
firebaseRef.set({
  app: {
    name: 'Jons Todo App',
    version: '0.1'
  },
  isRunning: true,
  user: {
    name: 'Jon',
    age: 56
  },
}).then((res) => {
  // console.log('set worked');
}, (err) => {
  console.log('set failed');
});

// In firebase, arrays (rows) are handled as key, value pairs.
// The unique key is generated by firebase when the object is set
// and returned to the caller:

// Create a new DB entry todos:
var todosRef = firebaseRef.child('todos');

// Callbacks for add, change and update actions:
todosRef.on('child_added', (snapshot) => {
  console.log('child_added:', snapshot.key, snapshot.val());
});
todosRef.on('child_changed', (snapshot) => {
  console.log('child_changed:', snapshot.key, snapshot.val());
});
todosRef.on('child_removed', (snapshot) => {
  console.log('child_removed:', snapshot.key, snapshot.val());
});

// Add a new todo using push(object) (returns the key):
var newTodoRef = todosRef.push({
  text: 'New todo one'
});
var newTodoRef = todosRef.push({
  text: 'New todo two'
});
/*
// Use on() to watch for DB changes. Pass it a callback function.
firebaseRef.on('value', (snapshot) => {
  console.log('Got value:', snapshot.val());
});

// Use off() to remove listener.
firebaseRef.off();  // Removes all callback listeners


// Can do this for specific functions.
var myLog = (snapshot) => {
  console.log('Got value:', snapshot.val());
};
firebaseRef.on('value', myLog);


// Challenge: use on() to report changes to user:
firebaseRef.child('user').on('value', (snapshot) => {
  console.log('DB user updated:', snapshot.val());
});

// Use child() to set specidied objects:
firebaseRef.child('user').set({
  name: 'Karen',
  age: 21,
});

// Or use a ref to the child:
firebaseRef.child('app').update({
  name: 'Jon\'s Todo Application',
}).then(() => {
  console.log('update to app worked');
}, (err) => {
  console.log('update ro app failed');
});

firebaseRef.child('user').update({
  name: 'child(user) test',
}).then(() => {
  console.log('*** child update worked ***');
}, (err) => {
  console.log('child update failed');
});


// To fetch data, use once on the reference for 'value'.
// This returns a snapshot object with various useful methods.
/*
firebaseRef.once('value').then((snapshot) => {
  console.log('Got entire DB: ', snapshot.val());
}, (err) => {
  console.log('once(value) failed:', err);
});

// Child ref and key (=object name)
firebaseRef.child('app').once('value').then((snapshot) => {
  console.log('Got child key: ', snapshot.key, snapshot.val());
}, (err) => {
  console.log('once(value) failed:', err);
});
*/


//
// // This will remove the version item!
// firebaseRef.child('app').set({
//   name: 'Jons test firebase',
// });

/*
// Use update to update existing properties:
// It updates first level, but not others.
// Use multiplath updates.
firebaseRef.update({
  isRunning: false,
  // Multipath
  'user/age': 22,
});

// Or use a ref to the child:
firebaseRef.child('app').update({
  name: 'Jon\'s Todo Application',
}).then(() => {
  console.log('update worked');
}, (err) => {
  console.log('update failed');
});

firebaseRef.update({
  'app/name': 'This is app/name multipath',
  // Multipath
  'user/name': 'My love',
}).then(() => {
  console.log('update worked');
}, (err) => {
  console.log('update failed');
});

firebaseRef.child('app').update({
  name: 'This is child(app) test',
}).then(() => {
  console.log('update worked');
}, (err) => {
  console.log('update failed');
});

firebaseRef.child('user').update({
  name: 'child(user) test',
}).then(() => {
  console.log('*** child update worked ***');
}, (err) => {
  console.log('child update failed');
});

console.log('We are here.');

// Remove data using remove:
// firebaseRef.remove(); // Everything
// firebaseRef.child('app/version').remove(); // Property by path.

// Or set value to null
// firebaseRef.child('app').update({
//   version: '2.0',
//   name: null
// });
// firebaseRef.update({
//   isRunning: null
// });
//
// firebaseRef.child('user/age').remove();
*/
